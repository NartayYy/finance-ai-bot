# handlers/keyboard_handler.py
import os
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram import types
from config import Config

class KeyboardHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é (Reply Keyboard)"""
    
    def __init__(self):
        self.config = Config()
    
    def _create_main_menu(self, user_id: int) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–æ–±—ã—á–Ω–æ–µ –∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫–æ–µ)"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_admin = user_id in self.config.ADMIN_USERS
        
        if is_admin:
            # –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
            buttons = [
                [
                    KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"),
                    KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                ],
                [
                    KeyboardButton(text="üìã –û—Ç—á–µ—Ç"),
                    KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å")
                ],
                [
                    KeyboardButton(text="üëë –ê–¥–º–∏–Ω–∫–∞"),
                    KeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
                ],
                [
                    KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
                ]
            ]
        else:
            # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            buttons = [
                [
                    KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"),
                    KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                ],
                [
                    KeyboardButton(text="üìã –û—Ç—á–µ—Ç"),
                    KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å")
                ],
                [
                    KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
                ]
            ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(
            keyboard=buttons,
            resize_keyboard=True,
            one_time_keyboard=False,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )
        
        return keyboard
    
    def get_main_menu(self, user_id: int) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._create_main_menu(user_id)
    
    async def handle_menu_button(self, message: Message, db_manager, report_handler, delete_handler):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
        
        text = message.text
        user_id = message.from_user.id
        is_admin = user_id in self.config.ADMIN_USERS
        
        if text == "üí∞ –ë–∞–ª–∞–Ω—Å":
            balance = db_manager.get_user_balance(user_id)
            await message.answer(
                "üí≥ **–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å**\n\n"
                f"üí∞ {balance:,.0f} ‚Ç∏",
                parse_mode="Markdown"
            )
            
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await report_handler.handle_stats_request(message)
            
        elif text == "üìã –û—Ç—á–µ—Ç":
            await report_handler.handle_report_request(message)
            
        elif text == "üóë –£–¥–∞–ª–∏—Ç—å":
            await delete_handler.handle_delete_last(message)
        
        elif text == "üëë –ê–¥–º–∏–Ω–∫–∞" and is_admin:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
            try:
                stats = db_manager.get_user_stats()
                users_list = db_manager.get_detailed_users_list()
                
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await message.answer(
                    f"üëë –ê–î–ú–ò–ù–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨\n\n"
                    f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
                    f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_7d']}\n"
                    f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {stats['new_30d']}\n\n"
                    f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
                    f"‚Ä¢ –õ–æ–≥–∏: sudo journalctl -u finance-bot -f\n"
                    f"‚Ä¢ –°—Ç–∞—Ç—É—Å: sudo systemctl status finance-bot"
                )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç)
                if users_list:
                    users_info = []
                    for user in users_list[:10]:
                        user_id_info = user['user_id']
                        username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                        first_name = user['first_name'] or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                        user_stats = db_manager.get_user_transaction_stats(user_id_info)
                        
                        # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ markdown
                        balance_str = f"{user_stats['balance']:,.0f}"
                        
                        user_info = (
                            f"ID: {user_id_info}\n"
                            f"–ò–º—è: {first_name}\n"
                            f"Username: {username}\n"
                            f"–ë–∞–ª–∞–Ω—Å: {balance_str} —Ç–µ–Ω–≥–µ\n"
                            f"–û–ø–µ—Ä–∞—Ü–∏–π: {user_stats['transactions']}"
                        )
                        users_info.append(user_info)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º –µ—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    users_text = "\n\n".join(users_info)
                    
                    if len(users_text) > 3500:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                        for i in range(0, len(users_list[:10]), 3):
                            chunk_users = users_list[i:i+3]
                            chunk_info = []
                            
                            for user in chunk_users:
                                user_id_info = user['user_id']
                                username = f"@{user['username']}" if user['username'] else "–±–µ–∑ username"
                                first_name = user['first_name'] or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                                user_stats = db_manager.get_user_transaction_stats(user_id_info)
                                balance_str = f"{user_stats['balance']:,.0f}"
                                
                                user_info = (
                                    f"ID: {user_id_info}\n"
                                    f"–ò–º—è: {first_name}\n"
                                    f"Username: {username}\n"
                                    f"–ë–∞–ª–∞–Ω—Å: {balance_str} —Ç–µ–Ω–≥–µ\n"
                                    f"–û–ø–µ—Ä–∞—Ü–∏–π: {user_stats['transactions']}"
                                )
                                chunk_info.append(user_info)
                            
                            chunk_text = "\n\n".join(chunk_info)
                            await message.answer(f"üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (—á–∞—Å—Ç—å {i//3 + 1}):\n\n{chunk_text}")
                    else:
                        await message.answer(f"üë§ –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n\n{users_text}")
                else:
                    await message.answer("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                print(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω–∫–∏: {e}")
        
        elif text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞" and is_admin:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ TXT —Ñ–∞–π–ª–µ
            await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
            report_path = await self._create_admin_analytics_report(db_manager)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            if report_path and os.path.exists(report_path):
                from aiogram.types import FSInputFile
                document = FSInputFile(report_path)
                await message.answer_document(
                    document,
                    caption="üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    parse_mode="Markdown"
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(report_path)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            help_text = (
                "ü§ñ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç —Å AI**\n\n"
                "**üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
                "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `–æ–±–µ–¥ 1500`\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
                "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
                "**üéØ –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:**\n"
                "‚Ä¢ `–∫–æ—Ñ–µ 400` - —Ä–∞—Å—Ö–æ–¥ –Ω–∞ –µ–¥—É\n"
                "‚Ä¢ `–∑–∞—Ä–ø–ª–∞—Ç–∞ 200000` - –¥–æ—Ö–æ–¥\n"
                "‚Ä¢ `120 000 –∫—Ä–µ–¥–∏—Ç` - –≤—ã–ø–ª–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞\n"
                "‚Ä¢ `—Ç–∞–∫—Å–∏ 1500` - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n\n"
                "**üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:**\n"
                "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã!\n\n"
                "**ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫:**\n"
                "–î–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç."
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
            if is_admin:
                help_text += (
                    "\n\nüëë **–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
                    "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                    "‚Ä¢ –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
                    "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"
                )
            
            await message.answer(help_text, parse_mode="Markdown")
        
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ - —ç—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            return False  # –í–µ—Ä–Ω—É—Ç—å False —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        
        return True  # –í–µ—Ä–Ω—É—Ç—å True –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    
    async def _create_admin_analytics_report(self, db_manager) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        
        import sqlite3
        import os
        from datetime import datetime, timedelta
        
        conn = sqlite3.connect(db_manager.db_path)
        cursor = conn.cursor()
        
        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        report_date = datetime.now().strftime('%d.%m.%Y %H:%M')
        
        # === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        cursor.execute("SELECT COUNT(*) FROM transactions")
        total_transactions = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM transactions")
        active_users_with_transactions = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_registered = cursor.fetchone()[0]
        
        # === –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cursor.execute("""
            SELECT COUNT(*) FROM users 
            WHERE last_activity >= datetime('now', '-7 days')
        """)
        active_7d = cursor.fetchone()[0]
        
        # –ù–æ–≤—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        cursor.execute("""
            SELECT COUNT(*) FROM users 
            WHERE registration_date >= datetime('now', '-30 days') 
            OR (registration_date IS NULL AND created_at >= datetime('now', '-30 days'))
        """)
        new_30d = cursor.fetchone()[0]
        
        # –°—Ä–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avg_operations = round(total_transactions / max(active_users_with_transactions, 1), 1)
        
        # === –ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò ===
        cursor.execute("""
            SELECT category, COUNT(*) as count, 
                   ROUND(COUNT(*) * 100.0 / ?, 1) as percentage
            FROM transactions 
            WHERE transaction_type = 'expense'
            GROUP BY category 
            ORDER BY count DESC 
            LIMIT 10
        """, (total_transactions,))
        
        popular_categories = cursor.fetchall()
        
        # === –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
        cursor.execute("""
            SELECT 
                user_id,
                COUNT(*) as trans_count
            FROM transactions 
            GROUP BY user_id
            ORDER BY trans_count DESC
        """)
        
        user_segments = cursor.fetchall()
        high_activity = len([u for u in user_segments if u[1] >= 10])
        medium_activity = len([u for u in user_segments if 3 <= u[1] < 10])
        low_activity = len([u for u in user_segments if u[1] < 3])
        inactive_users = total_registered - len(user_segments)
        
        # === –í–†–ï–ú–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π) ===
        cursor.execute("""
            SELECT 
                date(created_at) as day,
                COUNT(*) as operations
            FROM transactions 
            WHERE created_at >= datetime('now', '-7 days')
            GROUP BY date(created_at)
            ORDER BY day DESC
        """)
        
        daily_activity = cursor.fetchall()
        
        # === –î–û–•–û–î–´ –ò –†–ê–°–•–û–î–´ –ü–û –î–ù–Ø–ú ===
        cursor.execute("""
            SELECT 
                date(created_at) as day,
                SUM(CASE WHEN transaction_type = 'income' THEN amount ELSE 0 END) as income,
                SUM(CASE WHEN transaction_type = 'expense' THEN amount ELSE 0 END) as expense
            FROM transactions 
            WHERE created_at >= datetime('now', '-7 days')
            GROUP BY date(created_at)
            ORDER BY day DESC
        """)
        
        financial_activity = cursor.fetchall()
        
        # === AI –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è) ===
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI
        cursor.execute("SELECT COUNT(*) FROM transactions WHERE category != '–¥—Ä—É–≥–æ–µ'")
        ai_categorized = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM transactions WHERE category = '–¥—Ä—É–≥–æ–µ'")
        ai_uncategorized = cursor.fetchone()[0]
        
        ai_success_rate = round((ai_categorized / max(total_transactions, 1)) * 100, 1)
        
        conn.close()
        
        # === –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê ===
        report_content = f"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    –ê–î–ú–ò–ù–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –ë–û–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {report_date}

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:          {total_registered:>10}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π:           {active_7d:>10}
üÜï –ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π:             {new_30d:>10}
üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:  {active_users_with_transactions:>10}
üíº –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π:               {total_transactions:>10}
üìä –°—Ä–µ–¥–Ω–µ–µ –æ–ø–µ—Ä–∞—Ü–∏–π/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {avg_operations:>10}

üë• –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üî• –ê–∫—Ç–∏–≤–Ω—ã–µ (‚â•10 –æ–ø–µ—Ä–∞—Ü–∏–π):     {high_activity:>10} —á–µ–ª.
‚ö° –£–º–µ—Ä–µ–Ω–Ω—ã–µ (3-9 –æ–ø–µ—Ä–∞—Ü–∏–π):    {medium_activity:>10} —á–µ–ª.
üå± –ù–æ–≤–∏—á–∫–∏ (1-2 –æ–ø–µ—Ä–∞—Ü–∏–∏):      {low_activity:>10} —á–µ–ª.
üò¥ –ë–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–π:                {inactive_users:>10} —á–µ–ª.

üèÜ –ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–°–•–û–î–û–í
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for i, (category, count, percentage) in enumerate(popular_categories, 1):
            report_content += f"{i:>2}. {category:<15} {count:>8} –æ–ø–µ—Ä–∞—Ü–∏–π ({percentage:>5}%)\n"
        
        report_content += f"""
üìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for day, operations in daily_activity:
            day_name = datetime.fromisoformat(day).strftime('%d.%m (%A)')[:12]
            report_content += f"{day_name:<12} {operations:>5} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        
        report_content += f"""
üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        for day, income, expense in financial_activity:
            day_name = datetime.fromisoformat(day).strftime('%d.%m')
            income_str = f"{income:,.0f}" if income else "0"
            expense_str = f"{expense:,.0f}" if expense else "0"
            report_content += f"{day_name}  –î–æ—Ö–æ–¥: {income_str:>12} ‚Ç∏  –†–∞—Å—Ö–æ–¥: {expense_str:>12} ‚Ç∏\n"
        
        report_content += f"""
ü§ñ AI –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω–æ:     {ai_categorized:>10} ({ai_success_rate}%)
‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:     {ai_uncategorized:>10} ({100-ai_success_rate:.1f}%)

üìã –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, (user_id, trans_count) in enumerate(user_segments[:10], 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn = sqlite3.connect(db_manager.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT first_name, username FROM users WHERE user_id = ?", (user_id,))
            user_info = cursor.fetchone()
            conn.close()
            
            if user_info:
                name = user_info[0] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                username = f"@{user_info[1]}" if user_info[1] else "–±–µ–∑ username"
                report_content += f"{i:>2}. {name:<12} {username:<15} {trans_count:>3} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        
        report_content += f"""

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                        –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"admin_analytics_{timestamp}.txt"
        filepath = f"temp/{filename}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("temp", exist_ok=True)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(report_content)
            return filepath
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
