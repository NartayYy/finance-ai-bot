# ai/openrouter_client.py
import requests
import json
import asyncio
from typing import Dict, List, Optional
from config import Config

class OpenRouterClient:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI –∫–ª–∏–µ–Ω—Ç –¥–ª—è Groq –∏ OpenRouter"""
    
    def __init__(self, api_key: str):
        self.config = Config()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.config.AI_PROVIDER == "groq" and self.config.GROQ_API_KEY:
            self.api_key = self.config.GROQ_API_KEY
            self.base_url = self.config.GROQ_BASE_URL
            self.model = self.config.GROQ_MODEL
            self.provider = "groq"
        else:
            self.api_key = api_key or self.config.OPENROUTER_API_KEY
            self.base_url = self.config.OPENROUTER_BASE_URL
            self.model = self.config.OPENROUTER_MODEL
            self.provider = "openrouter"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if self.provider == "groq":
            self.headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
        else:
            self.headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/finance-ai-bot",
                "X-Title": "Finance AI Bot"
            }
        
        # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        print(f"ü§ñ AI Provider: {self.provider.upper()}")
        print(f"üß† Model: {self.model}")
    
    async def categorize_transaction(self, description: str, amount: float) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ AI"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ AI
        if self.config.DISABLE_AI:
            return self._simple_categorize(description, amount)
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:

–û–ø–∏—Å–∞–Ω–∏–µ: "{description}"
–°—É–º–º–∞: {amount} ‚Ç∏

–ü–†–ê–í–ò–õ–ê:
- –ö—Ä–µ–¥–∏—Ç, –∑–∞–π–º, –¥–æ–ª–≥, –≤—ã–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É = –†–ê–°–•–û–î (expense), –∫–∞—Ç–µ–≥–æ—Ä–∏—è "—Ñ–∏–Ω–∞–Ω—Å—ã"
- –í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞ –¢–ï–ë–ï, –∑–∞—Ä–ø–ª–∞—Ç–∞, –ø—Ä–µ–º–∏—è = –î–û–•–û–î (income)
- –ï–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ø–æ–∫—É–ø–∫–∏ = –†–ê–°–•–û–î (expense)

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤: –∑–∞—Ä–ø–ª–∞—Ç–∞, —Ñ—Ä–∏–ª–∞–Ω—Å, –≤–æ–∑–≤—Ä–∞—Ç, –ø—Ä–µ–º–∏—è, –ø–æ–¥–∞—Ä–æ–∫, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å–µ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –æ–¥–µ–∂–¥–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ñ–∏–Ω–∞–Ω—Å—ã, –¥—Ä—É–≥–æ–µ

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON:
{{"type": "income/expense", "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è"}}
"""
        
        try:
            response = await self._make_request_async(prompt, max_tokens=100)
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_response = response.strip()
            if clean_response.startswith('```json'):
                clean_response = clean_response.replace('```json', '').replace('```', '').strip()
            
            result = json.loads(clean_response)
            
            return {
                "type": result.get("type", "expense"),
                "category": result.get("category", "–¥—Ä—É–≥–æ–µ")
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∫–∞–∫ fallback
            return self._simple_categorize(description, amount)
    
    def _simple_categorize(self, description: str, amount: float) -> Dict[str, str]:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ AI (fallback)"""
        description_lower = description.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥—ã
        for income_keyword in self.config.INCOME_CATEGORIES:
            if income_keyword in description_lower:
                return {"type": "income", "category": "–¥–æ—Ö–æ–¥"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        for category, keywords in self.config.EXPENSE_CATEGORIES.items():
            for keyword in keywords:
                if keyword in description_lower:
                    return {"type": "expense", "category": category}
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if amount > 50000:  # –ë–æ–ª—å—à–∏–µ —Å—É–º–º—ã —Å–∫–æ—Ä–µ–µ –¥–æ—Ö–æ–¥—ã
            return {"type": "income", "category": "–¥–æ—Ö–æ–¥"}
        else:
            return {"type": "expense", "category": "–¥—Ä—É–≥–æ–µ"}
    
    async def analyze_spending(self, transactions: List, period_days: int) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –∏ —Å–æ–≤–µ—Ç—ã"""
        
        if not transactions:
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
        total_income = sum(t.amount for t in transactions if t.transaction_type == 'income')
        total_expense = sum(t.amount for t in transactions if t.transaction_type == 'expense')
        balance = total_income - total_expense
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for t in transactions:
            if t.transaction_type == 'expense':
                categories[t.category] = categories.get(t.category, 0) + t.amount
        
        top_expenses = sorted(categories.items(), key=lambda x: x[1], reverse=True)[:5]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ AI
        if self.config.DISABLE_AI:
            return self._simple_analysis(total_income, total_expense, balance, top_expenses, period_days)
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ {period_days} –¥–Ω–µ–π:

üí∞ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –î–æ—Ö–æ–¥—ã: {total_income:,.0f} ‚Ç∏
- –†–∞—Å—Ö–æ–¥—ã: {total_expense:,.0f} ‚Ç∏
- –ë–∞–ª–∞–Ω—Å: {balance:,.0f} ‚Ç∏

üìä –¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–°–•–û–î–û–í:
{chr(10).join([f"- {cat}: {amount:,.0f} ‚Ç∏" for cat, amount in top_expenses])}

üéØ –ó–ê–î–ê–ß–ò:
1. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –ù–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã —Ç—Ä–∞—Ç
3. –î–∞–π 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
4. –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π —Ç—Ä–∞—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.
"""
        
        try:
            response = await self._make_request_async(prompt)
            return response
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._simple_analysis(total_income, total_expense, balance, top_expenses, period_days)
    
    def _simple_analysis(self, total_income: float, total_expense: float, balance: float, top_expenses: list, period_days: int) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI"""
        
        analysis = f"""
üìä –ê–ù–ê–õ–ò–ó –ó–ê {period_days} –î–ù–ï–ô

üí∞ –í–∞—à–∏ –¥–æ—Ö–æ–¥—ã —Å–æ—Å—Ç–∞–≤–∏–ª–∏ {total_income:,.0f} ‚Ç∏
üí∏ –†–∞—Å—Ö–æ–¥—ã: {total_expense:,.0f} ‚Ç∏
üìà –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance:,.0f} ‚Ç∏

"""
        
        if balance > 0:
            analysis += "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Ç—Ä–∞—Ç–∏—Ç–µ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ.\n"
        elif balance == 0:
            analysis += "‚öñÔ∏è –í—ã —Ç—Ä–∞—Ç–∏—Ç–µ —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ.\n"
        else:
            analysis += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã.\n"
        
        if top_expenses:
            analysis += f"\nüìä –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞: {top_expenses[0][0]} ({top_expenses[0][1]:,.0f} ‚Ç∏)\n"
        
        analysis += "\nüí° –°–û–í–ï–¢–´:\n"
        analysis += "‚Ä¢ –í–µ–¥–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—á–µ—Ç —Ç—Ä–∞—Ç\n"
        analysis += "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü\n"
        analysis += "‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤\n"
        
        return analysis
    
    async def get_spending_advice(self, description: str, amount: float, balance: float) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        
        if self.config.DISABLE_AI:
            return ""  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–≤–µ—Ç—ã –µ—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        
        prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª {amount} ‚Ç∏ –Ω–∞ "{description}".
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.0f} ‚Ç∏

–î–∞–π –ö–û–†–û–¢–ö–ò–ô —Å–æ–≤–µ—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:
- –ï—Å–ª–∏ —Ç—Ä–∞—Ç–∞ —Ä–∞–∑—É–º–Ω–∞—è - –ø–æ–¥–¥–µ—Ä–∂–∏
- –ï—Å–ª–∏ —Ç—Ä–∞—Ç–∞ –±–æ–ª—å—à–∞—è - –¥–∞–π —Å–æ–≤–µ—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏
- –£—á–∏—Ç—ã–≤–∞–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
        
        try:
            response = await self._make_request_async(prompt, max_tokens=100)
            return f"ü§ñ {response}"
        except:
            return ""
    
    async def _make_request_async(self, prompt: str, max_tokens: int = 500) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self._make_request_sync, prompt, max_tokens)
    
    def _make_request_sync(self, prompt: str, max_tokens: int = 500) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI API —á–µ—Ä–µ–∑ requests"""
        
        payload = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "max_tokens": max_tokens,
            "temperature": 0.7
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=self.headers,
                json=payload,
                timeout=30,
                verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
            )
            
            if response.status_code != 200:
                error_text = response.text
                raise Exception(f"API error {response.status_code}: {error_text}")
            
            data = response.json()
            return data["choices"][0]["message"]["content"].strip()
            
        except Exception as e:
            raise Exception(f"Request failed: {str(e)}")
