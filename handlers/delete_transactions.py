# handlers/delete_transactions.py
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.db_manager import DatabaseManager
from datetime import datetime

class DeleteHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
    
    async def handle_delete_last(self, message: Message):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        last_transaction = self.db.get_last_transaction(user_id)
        
        if not last_transaction:
            await message.answer("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm_{last_transaction.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")
            ]
        ])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        sign = "+" if last_transaction.transaction_type == "income" else "-"
        date_str = last_transaction.created_at.strftime('%d.%m.%Y %H:%M')
        
        await message.answer(
            f"üóë **–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?**\n\n"
            f"üìÖ {date_str}\n"
            f"üí∞ {sign}{last_transaction.amount:,.0f} ‚Ç∏\n"
            f"üìù {last_transaction.description}\n"
            f"üìÇ {last_transaction.category}",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def handle_delete_list(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = self.db.get_recent_transactions_for_deletion(user_id, 10)
        
        if not transactions:
            await message.answer("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        keyboard_buttons = []
        
        for i, t in enumerate(transactions, 1):
            sign = "+" if t.transaction_type == "income" else "-"
            date_str = t.created_at.strftime('%d.%m %H:%M')
            button_text = f"{i}. {sign}{t.amount:,.0f}‚Ç∏ {t.description[:15]}..."
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=button_text, 
                    callback_data=f"delete_select_{t.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "üóë **–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def handle_delete_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = callback.from_user.id
        data = callback.data
        
        if data == "delete_cancel":
            await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await callback.answer()
            return
        
        if data.startswith("delete_select_"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_id = int(data.split("_")[2])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = self.db.get_recent_transactions_for_deletion(user_id, 50)
            transaction = next((t for t in transactions if t.id == transaction_id), None)
            
            if not transaction:
                await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await callback.answer()
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm_{transaction_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")
                ]
            ])
            
            sign = "+" if transaction.transaction_type == "income" else "-"
            date_str = transaction.created_at.strftime('%d.%m.%Y %H:%M')
            
            await callback.message.edit_text(
                f"üóë **–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?**\n\n"
                f"üìÖ {date_str}\n"
                f"üí∞ {sign}{transaction.amount:,.0f} ‚Ç∏\n"
                f"üìù {transaction.description}\n"
                f"üìÇ {transaction.category}",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        if data.startswith("delete_confirm_"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            transaction_id = int(data.split("_")[2])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
            transactions = self.db.get_recent_transactions_for_deletion(user_id, 50)
            transaction = next((t for t in transactions if t.id == transaction_id), None)
            
            if not transaction:
                await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await callback.answer()
                return
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            success = self.db.delete_transaction(transaction_id, user_id)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                new_balance = self.db.get_user_balance(user_id)
                
                sign = "+" if transaction.transaction_type == "income" else "-"
                
                await callback.message.edit_text(
                    f"‚úÖ **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!**\n\n"
                    f"üí∞ {sign}{transaction.amount:,.0f} ‚Ç∏ - {transaction.description}\n"
                    f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,.0f} ‚Ç∏",
                    parse_mode="Markdown"
                )
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            
            await callback.answer()
    
    def create_quick_delete_button(self, transaction_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", callback_data=f"delete_confirm_{transaction_id}")]
        ])
